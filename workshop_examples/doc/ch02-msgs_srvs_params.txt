=== ROS - Custom messages ===
http://wiki.ros.org/ROS/Tutorials
* Vytvoření adresáře s packages ve workspace
 mkdir ros_workshop
 rosws set ros_workshop
* Vytvoření package v aktuálním adresáři
 cd ros_workshop
 roscreate-pkg workshop_msgs
* Znovu spáchat "source setup.bash" (nový package)
  source ~/rosbuild_ws_hydro/setup.bash
* Otestovat pomoci roscd ???FUNGUJE???
  roscd workshop_msgs
* Uvnitř package vytvořit adr. "msg"
 mkdir msg
* Vytvořit message Detections.msg
 int32 FACE=0    # Head detections
 int32 BODY=1    # Whole body regions
 int32 type
 sensor_msgs/RegionOfInterest[] rects
* Info o základních typech (int32, float64, atd.) je zde
 http://wiki.ros.org/msg?action=show&redirect=ROS%2FMessage_Description_Language
* Již existující zakladní zprávy
 http://wiki.ros.org/common_msgs?distro=hydro
* Vytvořit message DetectionsStamped.msg
 Header header
 workshop_msgs/Detections detections
* Přidat závislost na sensor_msgs do "manifest.xml"
 <depend package="std_msgs"/>
 <depend package="sensor_msgs"/>
* V CMakeLists.txt povolit/odkomentovat generování zpráv
 rosbuild_genmsg()
* Zkusil "zkompilovat"
 rosmake
* A zjistit jestli ROS nový message zná... ???FUNGUJE???
 rosmsg show workshop_msgs/Detections

=== ROS - Sending custom messages ===
* Doplnit do detektoru kód pro publikování zprávy
 #include <ros/ros.h>
 #include <workshop_examples/DetectionsStamped.h>
 
 ros::NodeHandle n;
 ros::Publisher pub = n.advertise<workshop_msgs::DetectionsStamped>("face_detections_out", 1000);
 
 workshop_msgs::DetectionsStamped msg;
 msg.header.stamp = ros::Time::now();
 msg.header.frame_id = "";
 msg.detections.type = workshop_msgs::Detections::FACE;
 
 sensor_msgs::RegionOfInterest det;
 det.x_offset = 100;
 det.y_offset = 100;
 det.width = 64;
 det.height = 64;
 msg.detections.rects.push_back(det);
 
 pub.publish(msg);
 ROS_INFO_ONCE( "Message sent" );
* Vypis zpráv na zadaném topicu
 rostopic echo /face_detections_out

=== ROS - Introduction to services ===
http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv#Using_srv
http://wiki.ros.org/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29
* V balíčku vytvořit adresář "srv"
 mkdir srv
* Přidat definici nového servicu, soubor "DetectFaces.srv"
 bool detect_all
 ---
 workshop_msgs/Detections detections
* V CMakeLists.txt povolit generování services
 rosbuild_gensrv()
* Přegenerovat...
 rosmake
* Zná ROS nový service ???FUNGUJE???
 rossrv show workshop_examples/DetectFaces
* Do detektoru přidat callback pro servis
 #include <ros/ros.h>
 #include <workshop_examples/DetectFaces.h>
 
 bool detect(workshop_examples::DetectFaces::Request  &req,
             workshop_examples::DetectFaces::Response &res
             )
 {
     ROS_INFO_STREAM("Request: detect_all = " << req.detect_all);
 
     res.detections.type = workshop_msgs::Detections::FACE;
 
     sensor_msgs::RegionOfInterest det;
     det.x_offset = 100;
     det.y_offset = 100;
     det.width = 64;
     det.height = 64;
     res.detections.rects.push_back(det);

     ROS_INFO_STREAM("...sending back response.");
     return true;
 }
* Vytvořit service server
 ros::NodeHandle n;
 ros::ServiceServer service = n.advertiseService("detect_faces", detect);
* Zkompilovat
 rosmake
* Spustit
 rosrun workshop_examples example_service
* Vyzkoušet
 rosservice call /detect_faces "detect_all: true"

=== ROS - Launchfiles and parameters ===
* V balíčku vytvořit podadresář "launch" (ROS a roslaunch tuto cestu prohledává)
 mkdir launch
* Vytvořit jednoduchý launch file pro spuštění vlastního nodu "remap.launch"
 <?xml version="1.0"?>
 <launch>
   <node pkg="workshop_examples" type="example_publisher" name="example_publisher" output="screen">
   </node>
 </launch>
* Spustíme přes roslaunch
 roslaunch workshop_examples remap.launch
* Otestujme výstup
 rostopic echo /face_detections_out
* Přemapování vstupů a výstupů
 <remap from="face_detections_out" to="/faces" />
* Vyzkoušejme... ???FUNGUJE???
 roslaunch workshop_examples remap.launch
 rostopic echo /faces
* Jak na předávání parametrů do nodu?
* Nejprve čtení v nodu (jednoduchý příklad viz example_params.cpp)
 #include <ros/ros.h>
 
 const std::string SPARAM_NAME("sparam");
 
 int main(int argc, char **argv)
 {
     ros::init(argc, argv, "example_params");
     ros::NodeHandle private_nh("~");
     
     std::string sparam( "default" );
     private_nh.param( SPARAM_NAME, sparam, sparam );
     
     ROS_INFO_STREAM( SPARAM_NAME << " parameter: " << sparam );
 }
* Zkompilujeme (případně upravíme CMakeLists.txt) a spustíme přímo...
 rosrun workshop_examples example_params
* Zkusme vytvořit launch file "params.launch" a přidat nastavení parametrů
 <?xml version="1.0"?>
 <launch>
   <node pkg="workshop_examples" type="example_params" name="example_params" output="screen">
     <param name="sparam" value="value changed" />
     <param name="iparam" value="-10.0" />
     <param name="fparam" value="10" />
   </node>
 </launch>
* A spusťme přes launch file... ???FUNGUJE???
 roslaunch workshop_examples params.launch
* Elegantní varianta práce s parametry je přes konfigurační soubory (YAML formát)...
* V balíčku vytvořme adr. "config"
 mkdir config
* A v něm textový soubor "myparams.yaml" 
 sparam: "value changed from config"
 iparam: 20
 fparam: -20.0
* Upravme launch file tak, aby načetl parametr z configu
 <?xml version="1.0"?>
 <launch>
   <arg name="config_file" default="$(find workshop_examples)/config/myparams.yaml" />

   <node pkg="workshop_examples" type="example_params" name="example_params" output="screen">
     <rosparam file="$(arg config_file)" command="load" />
   </node>
 </launch>
* Vyzkoušejme... ???FUNGUJE???
 roslaunch workshop_examples yaml.launch
* Launch file umí volat i jiný launch file, třeba ten náš...
 <include file="$(find workshop_examples)/launch/yaml.launch" />
  <arg name="config_file" value="xyz.yaml"/>
 </include>

